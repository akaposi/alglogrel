
assume
  Q    : U;
  plus : Q → Q → Q;
  neg  : Q → Q;
  lt   : Q → Q → U;
constructors
  R   : U;
  Rel : Q → R → R → U;
  rat : Q → R;
  lim : (seq: Q → R) → ((δ ε : Q) → Rel (plus δ ε) (seq δ) (seq ε)) → R;
  eqR : (u v: R) → ((ε : Q) → Rel ε u v) → Id u v;

  ratRat: (q r ε : Q) → lt (neg ε) (plus q (neg r)) → lt (plus q (neg r)) ε → Rel ε (rat q) (rat r);

  ratLim: (q ε δ : Q)(y : Q → R)(py : (δ₁ ε₁ : Q) → Rel (plus δ₁ ε₁) (y δ₁) (y ε₁))
           → Rel (plus ε (neg δ)) (rat q) (y δ) → Rel ε (rat q) (lim y py);

  limRat: (q ε δ : Q)(y : Q → R)(py : (δ₁ ε₁ : Q) → Rel (plus δ₁ ε₁) (y δ₁) (y ε₁))
           → Rel (plus ε (neg δ)) (y δ) (rat q) → Rel ε (lim y py)(rat q);

  limLim: (ε δ η : Q)(y : Q → R)(py : (δ₁ ε₁ : Q) → Rel (plus δ₁ ε₁) (y δ₁) (y ε₁))
                     (x : Q → R)(px : (δ₁ ε₁ : Q) → Rel (plus δ₁ ε₁) (x δ₁) (x ε₁))
           → Rel (plus ε (plus (neg δ) (neg η))) (x δ) (y η) → Rel ε (lim x px) (lim y py);

  trunc: (u v : R)(ε : Q)(p q : Rel ε u v) → Id p q;